apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'

apply from: 'local.gradle'

// Manifest version information!
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))

android {
    compileSdkVersion 22
    buildToolsVersion '22.0.1'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 22

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
        }
    }

    productFlavors {
        internal {
            applicationId 'com.bronytunes.app.internal'
        }
        production {
            applicationId 'com.bronytunes.app'
        }
    }
}

// TODO remove eventually: http://b.android.com/162285
configurations {
    internalDebugCompile
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
    apt 'com.google.dagger:dagger-compiler:2.0.1'

    compile 'com.bronytunes:java:1.0.0'

    compile 'com.jakewharton.timber:timber:3.1.0'
    compile 'com.jakewharton:butterknife:7.0.0'
    compile 'com.jakewharton.byteunits:byteunits:0.9.0'

    compile 'com.squareup.okhttp:okhttp:2.4.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.4.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.picasso:picasso:2.5.2'

    compile 'io.reactivex:rxjava:1.0.12'
    compile 'io.reactivex:rxandroid:0.24.0'

    compile 'com.google.dagger:dagger:2.0.1'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'org.lucasr.twowayview:core:1.0.0-SNAPSHOT@aar'
    compile 'org.lucasr.twowayview:layouts:1.0.0-SNAPSHOT@aar'

    compile 'com.android.support:mediarouter-v7:22.2.0'
    compile 'com.android.support:support-v4:22.2.0'
    compile 'com.android.support:appcompat-v7:22.2.0'
    compile 'com.android.support:palette-v7:22.2.0'
    compile 'com.android.support:recyclerview-v7:22.2.0'
    compile 'com.android.support:cardview-v7:22.2.0'
    compile 'com.android.support:design:22.2.0'
    compile 'com.android.support:support-annotations:22.2.0'

    internalCompile 'com.mattprecious.telescope:telescope:1.4.0@aar'
    internalCompile 'com.squareup.leakcanary:leakcanary-android:1.3'

    productionCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3'

    internalDebugCompile 'com.jakewharton.madge:madge:1.1.2'
    internalDebugCompile 'com.jakewharton.scalpel:scalpel:1.1.2'
    internalDebugCompile 'com.squareup.retrofit:retrofit-mock:1.9.0'

    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2'
    // TODO https://code.google.com/p/android-test-kit/issues/detail?id=157
    //androidTestCompile 'com.android.support.test.espresso:espresso-contrib:2.2'
    androidTestCompile('com.android.support.test.espresso:espresso-contrib:2.0') {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }
    androidTestCompile 'com.android.support.test:runner:0.3'
    androidTestCompile 'com.android.support.test:rules:0.3'
}

def installAll = tasks.create('installAll')
installAll.description = 'Install all applications.'
android.applicationVariants.all { variant ->
    if(variant.install == null)
        return

    installAll.dependsOn(variant.install)
    // Ensure we end up in the same group as the other install tasks.
    installAll.group = variant.install.group
}

// The default 'assemble' task only applies to normal variants. Add test variants as well.
android.testVariants.all { variant ->
    tasks.getByName('assemble').dependsOn variant.assemble
}
